services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15673:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - air-quality-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  timescaledb:
    image: timescale/timescaledb-postgis:latest-pg13
    container_name: timescaledb
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./db-setup.sql:/docker-entrypoint-initdb.d/setup.sql
      - timescale_data:/var/lib/postgresql/data
    networks:
      - air-quality-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ingest-service:
    build: ./air-quality-ingest
    container_name: ingest-service
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - air-quality-network

  mesurement-processor-service:
    build: ./air-quality-processor
    container_name: mesurement-processor-service
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - air-quality-network

  anomaly-processor-service:
    build: ./anomaly-processor
    container_name: anomaly-processor-service
    restart: always
    ports:
     - "8080:8080"
     - "8081:8081"
    depends_on:
      rabbitmq:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    environment:
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - air-quality-network

  frontend:
   build: ./frontend
   container_name: frontend
   restart: always
   ports:
     - "3000:3000"
   depends_on:
     rabbitmq:
       condition: service_healthy
     timescaledb:
       condition: service_healthy
   networks:
     - air-quality-network


networks:
  air-quality-network:
    driver: bridge

volumes:
  timescale_data:
  redis_data: